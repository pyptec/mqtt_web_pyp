include "certificado.tbh"

dim connect_lost as no_yes=NO
declare sub mqtt_data(byref data as string)
declare sub prog_write_eeprom_char(addres_byte as byte,data as byte)
declare sub prog_write_eeprom(addres_byte as byte,data_string as string,longData_byte as byte)
declare function  prog_read_eeprom(addres_byte as byte,longData_byte as byte)as string
declare sub prog_write_eeprom_string(addres_byte as byte,data_string as string,longData_byte as byte)
declare function formateo_argument(byref mqtt_subscritor as string, byref argument as string) as string
declare sub inicio_servidor_html()
declare sub aceptar_configuracion()
declare sub inicia_own_mqtt()
declare function publica_informacion()as boolean
declare sub inicia_mqtt_configurado()
declare function Arreglo_string(data_string as string) as string
declare function ultimo_slash_cadena(byref cadena as string)as string
'====================================================================
'conectado al servidor mqtt propio
sub callback_mqtt_connect_ok()
	dim EE_lee_prog as byte
	dim Suscritor  as string
	dim longitud as word
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)'led verde prendido
	EE_lee_prog=prog_read_eeprom(EEPROG_ADDR,1)
	
	sys.debugprint("programacion = "+hex(EE_lee_prog)+"\n")
	if EE_lee_prog = 1 then
	mqtt_sub("carullapoloclub/text",QOS_AT_MOST_ONCE) 'v1/devices/cliente1/# LED/#, QOS_AT_LEAST_ONCE	
	'publica en el servidor pyp
	publica_informacion()
	prog_write_eeprom_char(EEPROG_ADDR,0)
	mqtt_disconnect()
	else if EE_lee_prog = 0 then
		'lee el suscritor en eeprom
		Suscritor = stor.getdata(EEMQTT_SUSCRITOR_ADDR,MQTT_SIZE_SUSCRITOR)
		'arregla trama
		Suscritor=Arreglo_string(Suscritor)
		sys.debugprint("suscritor mqtt ="+Suscritor+"\n")
		longitud=len(Suscritor)
		sys.debugprint("longitud del suscritor mqtt ="+str(longitud)+"\n")
		mqtt_sub(Suscritor,QOS_AT_MOST_ONCE) 'v1/devices/cliente1/# LED/#, QOS_AT_LEAST_ONCE	
	end if
	
end sub

sub callback_mqtt_connect_lost()
	pat.play(PAT_GREEN_BLINKING,PL_PAT_CANINT)
	connect_lost=YES
end sub

sub callback_mqtt_notif(byref topic as string,byref data as string)
	
	
	dim x as string
	 x=ultimo_slash_cadena(topic)
	'x=mid(topic,17,7)
	sys.debugprint("dato recivido "+x+chr(10)+chr(14))
	'if x<>STR_LED then exit sub
	
	
	 if x="entrada" then
		io.num=RELE1_GPIO2
		mqtt_data(data)
	else if x="salida" then
		io.num=RELE2_GPIO3
		mqtt_data(data)
	end if

	
end sub

sub  callback_mqtt_sub_ok()
end sub
sub mqtt_data(byref data as string)
	dim w as word
	dim y as byte
	if data ="1" then
		
		 w=sys.timercount
		 io.state= HIGH
		 y=0
		 while y<1
			if sys.timercount-w>1 then
				y=2
				io.state= LOW
				mqtt_publish("carullapoloclub/text","barrera ok",QOS_AT_MOST_ONCE)
				doevents
			end if
		wend
		 
	else if data="0" then
		 io.state=LOW
	end if
end sub
sub mostrar_programacion()
dim trama as string
	trama=prog_read_eeprom(EEMQTT_HOST_ADDR,MQTT_SIZE_HOST)
	sys.debugprint("direccion ip host = "+trama +"\n")
	trama=prog_read_eeprom(EEMQTT_OWN_IP_ADDR,MQTT_SIZE_HOST)
	sys.debugprint("direccion ip propia = "+trama+"\n")
	trama=prog_read_eeprom(EEMQTT_MASCARA_ADDR,MQTT_SIZE_HOST)
	sys.debugprint("direccion ip mascara = "+trama+"\n")
	
	trama=prog_read_eeprom(EEMQTT_GATEWAY_ADDR,MQTT_SIZE_HOST)
	sys.debugprint("puerta de enlace = "+trama+"\n")
	
	trama=stor.getdata(EEMQTT_PTO_ADDR,MQTT_SIZE_HOST)
	sys.debugprint("puerto mqtt = "+trama+"\n")
	
	trama=stor.getdata(EEMQTT_USUARIO_ADDR,MQTT_SIZE_USUARIO)
	sys.debugprint("usuario mqtt = "+trama+"\n")
	
	trama=stor.getdata(EEMQTT_PASS_ADDR,MQTT_SIZE_PASS)
	sys.debugprint("password mqtt = "+trama+"\n")
	
	
	trama=stor.getdata(EEMQTT_SUSCRITOR_ADDR,MQTT_SIZE_SUSCRITOR)
	sys.debugprint("suscritor mqtt = "+trama+"\n")
	
	trama=stor.getdata(EEMQTT_PUBLICADOR_ADDR,MQTT_SIZE_SUSCRITOR)
	sys.debugprint("Publicador mqtt = "+trama+"\n")
	
	trama=stor.getdata(EEMQTT_CLIENTE_ID_ADDR,MQTT_SIZE_CLIENTE)
	sys.debugprint("ID cliente mqtt = "+trama+"\n")
	
end sub
'programo un caracter en la eeprom
sub prog_write_eeprom_char(addres_byte as byte,data as byte)
dim  num_data_write as byte
dim  data_string as string
data_string=chr(data)
sys.debugprint("writee_prog = "+data_string)
num_data_write= stor.setdata(data_string,addres_byte ) 'write EEPROM
end sub
'programo las direcciones ip
sub prog_write_eeprom(addres_byte as byte,data_string as string,longData_byte as byte)
dim  num_data_write as byte
dim data_eewrite as string

data_eewrite=ddval(data_string)
num_data_write= stor.setdata(data_eewrite,addres_byte ) 'write EEPROM

end sub
'lee las direcciones ip
function  prog_read_eeprom(addres_byte as byte,longData_byte as byte)as string
dim data_String as string
dim lendata as byte

data_String=ddstr(stor.getdata(addres_byte, longData_byte)) 'lee la eeprom
prog_read_eeprom=data_String'

end function
'programo en eeprom un string y rellena si faltan caracteres con null
sub prog_write_eeprom_string(addres_byte as byte,data_string as string,longData_byte as byte)
dim  num_data_write,lendata,i as byte
dim data_eewrite as string

data_eewrite=data_string
'   longitud de la trama
lendata=len(data_eewrite)

	if lendata <> longData_byte   then
		for i=lendata to longData_byte 
		
		data_string=data_string+"\0"
		next i
	data_eewrite=data_string	
	end if
num_data_write= stor.setdata(data_eewrite,addres_byte ) 'write EEPROM

end sub

'programa que quita los caracteres nulos
function Arreglo_string(data_string as string) as string
dim  lendata,i as byte
dim data_eewrite as string

'longitud de la trama inicial
lendata=len(data_string)
'sys.debugprint("longitud trama inicial = "+str(lendata)+"\n")

	for i=1 to lendata
	data_eewrite=mid(data_string,i,1)
	'sys.debugprint("caracter de la trama = "+data_eewrite+"\n")
	'busca el primer null en la cadena
	if data_eewrite = "\0" then
	'arma la nueva cadena
		data_eewrite=mid(data_string,1,i-1)
	'	sys.debugprint("trama arreglada = "+data_eewrite +"\n")
	'	sys.debugprint("longitud trama final = "+str(len(data_eewrite))+"\n")
		Arreglo_string=data_eewrite
		exit function
	end if
	next i

end function
function ultimo_slash_cadena(byref cadena as string)as string
dim j,long_trama,pos,i,frompos,ultimo as byte
	j=5
	long_trama=len(cadena)
	for i=1 to j
	pos=instr(1,cadena,"/",i)
	 if pos = 0 then
		j=i
	exit for
		end if
		ultimo=pos
	next i
	 ultimo_slash_cadena=mid(cadena,ultimo+1,long_trama-ultimo)
	 	sys.debugprint("trama del ultimo / = "+ ultimo_slash_cadena +"\n")
end function
'formateo de la cadena y modifica el caracter cambiandolo por un (/)
function formateo_argument(byref mqtt_subscritor as string, byref argument as string) as string

dim j,long_trama,pos,i,frompos as byte
dim array(4) as byte
dim cadena as string
dim validador_almuadilla as string
			j=5
			long_trama=len(mqtt_subscritor)
			for i=1 to j
			pos=instr(1,mqtt_subscritor,argument,i)
			 if pos = 0 then
				j=i
				exit for
			end if
			array(i-1)=pos
			next i
				
			'se lee la cadena desde el caracter 1
			cadena=""
			frompos=1
			for i=0 to j-2
			cadena = cadena+mid (mqtt_subscritor, frompos, array(i)-frompos)
			frompos= len (argument)+array(i)
			cadena =cadena +"/"
			next i
			
			
			validador_almuadilla=mid (mqtt_subscritor, frompos+1, frompos-array(i))
			if len(validador_almuadilla)<=2 then
				if validador_almuadilla = almuadilla then
				cadena =cadena +"#"
				else
				validador_almuadilla=mid (mqtt_subscritor, frompos, frompos-array(i))
				cadena =cadena+validador_almuadilla
				end if
			else
				validador_almuadilla=mid (mqtt_subscritor, frompos, frompos-array(i))
				cadena =cadena+validador_almuadilla
			end if

	
	
	formateo_argument = cadena
end function
'inicia el servidor html de configuracion
sub inicio_servidor_html()
dim f as byte
		net.ip = "192.168.1.95" '' set IP address <<<<<<<< YOU MIGHT NEED TO CHANGE THIS
	
	' set up HTTP sockets (we setup 4 of them)
	for f = 0 to 3
		sock.num = f
		
		'for HTTP to work, we need to request memory for RX, TX, and VAR buffers
		sock.rxbuffrq(1)
		sock.txbuffrq(1)
		sock.varbuffrq(1)
		
		'setup the socket itself
		sock.protocol=PL_SOCK_PROTOCOL_TCP
		sock.inconmode=PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
		sock.httpportlist="80"
	next f
	
	'actual buffer memory allocation
	sys.buffalloc 
	
end sub
sub aceptar_configuracion()
'programo la memoria para enviar la informacion al servidor programado
	prog_write_eeprom_char(EEPROG_ADDR,01)
	sys.halt
	sys.reboot
end sub
'inicio servidor propio mqtt
sub inicia_own_mqtt()
dim own_ip as string
dim own_mask as string
dim own_gateway as string 
dim own_name_id as string	

'lee los datos de la eeprom
	own_ip=prog_read_eeprom(EEMQTT_OWN_IP_ADDR,MQTT_SIZE_HOST)
	net.ip=own_ip
	own_mask=prog_read_eeprom(EEMQTT_MASCARA_ADDR,MQTT_SIZE_HOST)
	net.netmask=own_mask
	
	own_gateway=prog_read_eeprom(EEMQTT_GATEWAY_ADDR,MQTT_SIZE_HOST)
	net.gatewayip=own_gateway
	
	own_name_id="pypteclonuevoeniot"

	pat.play(PAT_GREEN_BLINKING,PL_PAT_CANINT)

		
	io.num=RELE1_GPIO2
	io.state=LOW
	io.enabled=YES


	io.num=RELE2_GPIO3
	io.state=LOW
	io.enabled=YES

	mqtt_start()
	if mqtt_connect(MQTT_SERVER_HOST,1883,MQTT_NAME,MQTT_PASSWORD,30,own_name_id)=NG then
		'In here, we cannot make a tcp link to the host ...
		connect_lost=YES
	end if
end sub
function publica_informacion()as boolean
dim trama as string 
	'if connect_lost=NO then
'direccion del servidor
	trama=prog_read_eeprom(EEMQTT_HOST_ADDR,MQTT_SIZE_HOST)
	mqtt_publish("carullapoloclub/text","direccion ip host "+trama,QOS_AT_MOST_ONCE)
'direccion propia ip	
	trama=prog_read_eeprom(EEMQTT_OWN_IP_ADDR,MQTT_SIZE_HOST)
	mqtt_publish("carullapoloclub/text","direccion ip own "+trama,QOS_AT_MOST_ONCE)
'mascara de conexion
	trama=prog_read_eeprom(EEMQTT_MASCARA_ADDR,MQTT_SIZE_HOST)
	mqtt_publish("carullapoloclub/text","direccion mascara "+trama,QOS_AT_MOST_ONCE)
'puerta de enlace
	trama=prog_read_eeprom(EEMQTT_GATEWAY_ADDR,MQTT_SIZE_HOST)
	mqtt_publish("carullapoloclub/text","puerta de enlace "+trama,QOS_AT_MOST_ONCE)
	
'puerto de conexion
	trama=stor.getdata(EEMQTT_PTO_ADDR,MQTT_SIZE_HOST)
	mqtt_publish("carullapoloclub/text","puerta de conexion "+trama,QOS_AT_MOST_ONCE)
'usuario
	trama=stor.getdata(EEMQTT_USUARIO_ADDR,MQTT_SIZE_USUARIO)
	mqtt_publish("carullapoloclub/text","usuario "+trama,QOS_AT_MOST_ONCE)
'password
	trama=stor.getdata(EEMQTT_PASS_ADDR,MQTT_SIZE_PASS)
	mqtt_publish("carullapoloclub/text","password "+trama,QOS_AT_MOST_ONCE)
'subscritor mqtt
	trama=stor.getdata(EEMQTT_SUSCRITOR_ADDR,MQTT_SIZE_SUSCRITOR)
	mqtt_publish("carullapoloclub/text","subscritor "+trama,QOS_AT_MOST_ONCE)
'publicador mqtt
	trama=stor.getdata(EEMQTT_PUBLICADOR_ADDR,MQTT_SIZE_SUSCRITOR)
	mqtt_publish("carullapoloclub/text","publicador "+trama,QOS_AT_MOST_ONCE)
'id cliente
	trama=stor.getdata(EEMQTT_CLIENTE_ID_ADDR,MQTT_SIZE_CLIENTE)
	mqtt_publish("carullapoloclub/text","id cliente "+trama,QOS_AT_MOST_ONCE)
	'end if
	publica_informacion=true
end function
sub inicia_mqtt_configurado()
	
dim own_ip as string (15)
dim own_mask as string (15)
dim own_gateway as string (15)
dim own_server_host as string (15)
dim own_mqtt_name as string(8)
dim own_mqtt_password as string(16)
dim own_puerto 	as word
dim own_name_id as string(18)	
dim lentrama as byte

'lee los datos de la eeprom
	
	'-------------------------------------------------------------------
	'ip addr
	own_ip=prog_read_eeprom(EEMQTT_OWN_IP_ADDR,MQTT_SIZE_HOST)
	'arregla trama
		own_ip=Arreglo_string(own_ip)
	net.ip=own_ip
	sys.debugprint("own_ip = "+own_ip+"\n")
	sys.debugprint("longitud own ip = "+str(len(own_ip))+"\n")
	'-------------------------------------------------------------------
	'ip mask
	own_mask=prog_read_eeprom(EEMQTT_MASCARA_ADDR,MQTT_SIZE_HOST)
	'arregla trama
	own_mask=Arreglo_string(own_mask)
	net.netmask=own_mask
	sys.debugprint("own_mask = "+own_mask+"\n")
	sys.debugprint("longitud own_mask = "+str(len(own_mask))+"\n")
	'-------------------------------------------------------------------
	'ip puerta de enlace
	own_gateway=prog_read_eeprom(EEMQTT_GATEWAY_ADDR,MQTT_SIZE_HOST)
	'arregla trama
	own_gateway=Arreglo_string(own_gateway)
	net.gatewayip=own_gateway
	sys.debugprint("own_gateway = "+own_gateway+"\n")
	sys.debugprint("longitud own_gateway = "+str(len(own_gateway))+"\n")
	'-------------------------------------------------------------------
	
	'ip servidor
	own_server_host=prog_read_eeprom(EEMQTT_HOST_ADDR,MQTT_SIZE_HOST)
	'arregla trama
	own_server_host=Arreglo_string(own_server_host)
	sys.debugprint("own_server_host = "+own_server_host+"\n")
	lentrama=len(own_server_host)
	sys.debugprint("longitud own_server_host = "+str(lentrama)+"\n")
	'-------------------------------------------------------------------
	'usuario
	own_mqtt_name=stor.getdata(EEMQTT_USUARIO_ADDR,MQTT_SIZE_USUARIO)
	'arregla trama
	own_mqtt_name=Arreglo_string(own_mqtt_name)
	sys.debugprint("own_mqtt_name = "+own_mqtt_name+"\n")
	sys.debugprint("longitud own_mqtt_name = "+str(len(own_mqtt_name))+"\n")
	'-------------------------------------------------------------------
	
	'password
	own_mqtt_password=stor.getdata(EEMQTT_PASS_ADDR,MQTT_SIZE_PASS)
	'arregla trama
	own_mqtt_password=Arreglo_string(own_mqtt_password)
	sys.debugprint("own_mqtt_password = "+own_mqtt_password+"\n")
	sys.debugprint("longitud own_mqtt_password = "+str(len(own_mqtt_password))+"\n")
	'-------------------------------------------------------------------
	
	'puerto mqtt
	own_puerto=lval(stor.getdata(EEMQTT_PTO_ADDR,MQTT_SIZE_PTO))
	sys.debugprint("own_puerto = "+str(own_puerto)+"\n")
	'-------------------------------------------------------------------
	
	'nombre servidor
	own_name_id= stor.getdata(EEMQTT_CLIENTE_ID_ADDR,MQTT_SIZE_CLIENTE)
	'arregla trama
	own_name_id=Arreglo_string(own_name_id)
	sys.debugprint("own_nombre_id = "+own_name_id+"\n")
	sys.debugprint("longitud own_name_id = "+str(len(own_name_id))+"\n")
	'-------------------------------------------------------------------
	
	pat.play(PAT_GREEN_BLINKING,PL_PAT_CANINT)

		
	io.num=RELE1_GPIO2
	io.state=LOW
	io.enabled=YES


	io.num=RELE2_GPIO3
	io.state=LOW
	io.enabled=YES

	mqtt_start()
	if mqtt_connect(own_server_host,own_puerto,own_mqtt_name,own_mqtt_password,30,own_name_id)=NG then
	' if mqtt_connect(own_server_host,own_puerto,own_mqtt_name,own_mqtt_password,30,own_name_id)=NG then
		'In here, we cannot make a tcp link to the host ...
		connect_lost=YES
	end if
end sub